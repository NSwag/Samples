/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.6.6267.41348 (NJsonSchema v8.7.6267.38130) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export class ClientBase {
    protected transformOptions(options: RequestOptionsArgs) {
        console.log("HTTP call, options: " + JSON.stringify(options));

        options.headers.append("myheader", "myvalue"); 
        return Promise.resolve(options);
    }
}

@Injectable()
export class SampleDataClient extends ClientBase {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    weatherForecasts(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).concatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).map((response) => {
            return this.processWeatherForecasts(response);
        }).catch((response: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processWeatherForecasts(response));
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>Observable.throw(response);
        });
    }

    protected processWeatherForecasts(response: Response): WeatherForecast[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: WeatherForecast[] | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, null);
    }
}

export class WeatherForecast { 
    dateFormatted: string; 
    temperatureC: number; 
    summary: string; 
    temperatureF: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.dateFormatted = data["DateFormatted"] !== undefined ? data["DateFormatted"] : undefined;
            this.temperatureC = data["TemperatureC"] !== undefined ? data["TemperatureC"] : undefined;
            this.summary = data["Summary"] !== undefined ? data["Summary"] : undefined;
            this.temperatureF = data["TemperatureF"] !== undefined ? data["TemperatureF"] : undefined;
        }
    }

    static fromJS(data: any): WeatherForecast {
        return new WeatherForecast(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["DateFormatted"] = this.dateFormatted !== undefined ? this.dateFormatted : undefined;
        data["TemperatureC"] = this.temperatureC !== undefined ? this.temperatureC : undefined;
        data["Summary"] = this.summary !== undefined ? this.summary : undefined;
        data["TemperatureF"] = this.temperatureF !== undefined ? this.temperatureF : undefined;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new WeatherForecast(JSON.parse(json));
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}